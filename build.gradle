plugins {
  id 'com.github.sherter.google-java-format' version '0.8'
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/test/**','**/proto/**', '**/example/**', '**/tool/**',  
                    '**/**Perf**', '**/**Test**', '**/CommandUtils**', '**/VoteResultParams**',
                    '**/**Result**', '**/**State**'])
        })
    }
}

def spring_version = "4.3.25.RELEASE"

List spring = [
        "org.springframework:spring-core:$spring_version",
        "org.springframework:spring-beans:$spring_version",
        "org.springframework:spring-context:$spring_version",
        "org.springframework:spring-tx:$spring_version",
]

dependencies {
	compile spring
    compile 'org.fisco-bcos:web3sdk:2.2.0'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'
    compile 'com.google.protobuf:protobuf-java:3.9.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.2'
    compile 'junit:junit:4.12'
    
}

googleJavaFormat {
  options style: 'AOSP'
}

check.dependsOn.remove(test)
check.dependsOn.remove(verifyGoogleJavaFormat)

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			srcDir 'src/test/java'
		}
		resources  {
			srcDir 'src/main/resources'
		}
	}
}

jar {
    destinationDir file('dist/apps')
    archiveName project.name + '.jar'
	
    exclude '**/*.xml'
    exclude '**/*.properties'
    exclude '**/*.crt'
    exclude '**/*.key'
    exclude '**/*.secret'
    exclude '**/*.so'
    exclude '**/*.dll'
    exclude '**/*.dylib'

    doLast {
      copy {
        from configurations.runtime
        into 'dist/lib'
      }
      copy {
        from file('src/main/resources/')
        into 'dist/conf'
      }
      copy {
        from file('tools/')
        into 'dist/tools/'
      }
    }
}
